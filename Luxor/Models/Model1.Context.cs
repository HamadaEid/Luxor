//------------------------------------------------------------------------------
// <auto-generated>
//     Der Code wurde von einer Vorlage generiert.
//
//     Manuelle Änderungen an dieser Datei führen möglicherweise zu unerwartetem Verhalten der Anwendung.
//     Manuelle Änderungen an dieser Datei werden überschrieben, wenn der Code neu generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Luxor.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NilEntities : DbContext
    {
        public NilEntities()
            : base("name=NilEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Einschreibung> Einschreibungs { get; set; }
        public virtual DbSet<Kurs> Kurs1 { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<CourseLevel> CourseLevels { get; set; }
    
        [DbFunction("NilEntities", "funcGetKursByTitel")]
        public virtual IQueryable<funcGetKursByTitel_Result> funcGetKursByTitel(string titel)
        {
            var titelParameter = titel != null ?
                new ObjectParameter("Titel", titel) :
                new ObjectParameter("Titel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<funcGetKursByTitel_Result>("[NilEntities].[funcGetKursByTitel](@Titel)", titelParameter);
        }
    
        public virtual ObjectResult<Kurs> GetKurs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kurs>("GetKurs");
        }
    
        public virtual ObjectResult<Kurs> GetKurs(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kurs>("GetKurs", mergeOption);
        }
    
        public virtual int HinzufügKurs(string titel, Nullable<int> kredite)
        {
            var titelParameter = titel != null ?
                new ObjectParameter("Titel", titel) :
                new ObjectParameter("Titel", typeof(string));
    
            var krediteParameter = kredite.HasValue ?
                new ObjectParameter("Kredite", kredite) :
                new ObjectParameter("Kredite", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HinzufügKurs", titelParameter, krediteParameter);
        }
    }
}
